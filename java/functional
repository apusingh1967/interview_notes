public class JExpt {
    public static void main(String[] args) {
        List.of(new Emp("bat", 100), new Emp("cat", 120),
                        new Emp("rat", 70), new Emp("bat", 95), new Emp("rat", 105))
                .stream().collect(Collectors.groupingBy(Emp::name, Collectors.summingDouble(Emp::salary)))
                .forEach((x, y) -> System.out.println(y));

    }

    record Emp(String name, double salary) {}
}

        List.of(new Emp("bat", 100), new Emp("cat", 120),
                        new Emp("rat", 70), new Emp("bat", 95), new Emp("rat", 105))
                .stream().reduce(0D, (acc, y) -> acc + y.salary, (x, y) -> x + y);

======================================================================================
var mp = s.chars().mapToObj(x -> ((char)x) + "")
.parallel()
    .collect(HashMap<String, Integer>::new, 
    (HashMap<String, Integer>m, String s2) -> m.put(s2, m.getOrDefault(s2, 0) + 1), 
    (HashMap<String, Integer>m1, HashMap<String, Integer>m2) -> {
        for(var k: m2.keySet()) m1.put(k, m1.getOrDefault(k, 0) + m2.get(k))
    });
=====================================================================================
Arrays.stream("abcab".split(""))
            .collect(HashMap<String, Integer>::new, 
                (m, s) -> m.put(s, m.getOrDefault(s, 0) + 1),
                (m1, m2) -> m1.putAll(m2));
=====================================================================================
Arrays.stream("abcab".split(""))
            .collect(Collectors.groupingBy(x -> x)).forEach((x, y) -> System.out.println(x + " -> " + y.size()));
=====================================================================================
Stream.of(new Salary(1, 100.1), new Salary(2, 121.3), new Salary(1, 110.5))
    .collect(Collectors.groupingBy(
        x -> x.id, 
    Collector.of(
        HashMap<Integer, Double>::new,
        (m, s) -> m.put(s.id, m.getOrDefault(s.id, 0D) + s.salary),
        (m1, m2) -> {
            m1.putAll(m2);
            return m1;
        },
        Collector.Characteristics.UNORDERED)
    ))
record Salary(Integer id, Double salary) {}
